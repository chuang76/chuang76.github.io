<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Before Dawn</title>
    <link>https://chuang76.github.io/posts/</link>
    <description>Recent content in Posts on Before Dawn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 14 Feb 2021 17:54:39 +0800</lastBuildDate><atom:link href="https://chuang76.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>STM32 Nucleo64: Lab #1</title>
      <link>https://chuang76.github.io/posts/stm32_1/</link>
      <pubDate>Sun, 14 Feb 2021 17:54:39 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/stm32_1/</guid>
      <description>最近買了一塊 STM32 L476RG 來玩，紀錄一下學習過程，基本上是根據交大 MCSL 這堂課的內容做點實驗。目的在於熟悉 ARM 指令，以及了解 bare metal 等相關知識。
實驗環境
 STM32 Nucleo-L476RG MCU Windows OS 10 USB Type-A to Mini-B cable IDE: System Workbench for STM32 (SW4STM32)  Lab 1-1 打開 IDE 後，Create 出一個 Ac6 STM32 MCU Project，選擇 L476RG board，預設會把 Debug 打開，選擇 No firmware 就可以了。以下為 main.s 的 code：
	.syntax unified .cpu cortex-m4 .thumb .text .global main .equ AA, 0x55 main: movs r0, #AA movs r1, #20 adds r2, r0, r1 // r2 = r0 + r1 b main Q1：程式執行結束後 R2 值為多少？如何觀察？Build All 後，Run as debug，設單步執行，並且打開 Registers Window 觀察，可以發現 r2 變成 105。自己驗證 0x55 (AA) + 20 = 85 + 20 = 105，結果正確。</description>
    </item>
    
    <item>
      <title>Return-to-libc Attack</title>
      <link>https://chuang76.github.io/posts/return-to-libc/</link>
      <pubDate>Mon, 01 Feb 2021 18:49:41 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/return-to-libc/</guid>
      <description>To prevent buffer overflow attacks, some operating systems allow the programs to make their stacks non-executable, which means if we jump to the stack and run the shellcode, we will fail. The goal of the following experiments is to utilize the variant of buffer overflow attack &amp;ndash; return-to-libc attack and get the root privilege of the shell.
Setup Environment:
 Google cloud virtual machine: Ubuntu 20.04 Linux kernel version: 5.4.0 Create a symbolic link from &amp;ldquo;/bin/zsh&amp;rdquo; to &amp;ldquo;/bin/sh&amp;rdquo; since /bin/dash in most Ubuntu systems prevents itself from being executed in a Set-UID process Disable ASLR and Stackguard protection, but make the stack non-executable (our purpose of the experiment)  Vulnerable program Here is a vulnerable program called retlib.</description>
    </item>
    
    <item>
      <title>Stack Buffer Overflow</title>
      <link>https://chuang76.github.io/posts/bof/</link>
      <pubDate>Sun, 31 Jan 2021 14:47:41 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/bof/</guid>
      <description>The goal of the following experiments is to exploit buffer overflow attack and get the root privilege of the shell.
Setup Environment:
 Google cloud virtual machine: Ubuntu 20.04 Linux kernel version: 5.4.0  Countermeasures:
 ASLR (address space layout randomization) provided by the operating system NX/DEP bit provided by the hardware architecture StackGuard or canary mechanism provided by the compiler  Check if ASLR is activated or not (default is 2):</description>
    </item>
    
    <item>
      <title>Writeup: nebula (level 10)</title>
      <link>https://chuang76.github.io/posts/nebula_p4/</link>
      <pubDate>Tue, 22 Dec 2020 14:36:26 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/nebula_p4/</guid>
      <description>Nebula is a virtual machine that covers a variety of challenges about Linux privilege escalation, scripting language issues, and file system race conditions. It is available at Exploit Exercises.
Level 10 The description of Level 10 is provided as follows.
The setuid binary at /home/flag10/flag10 binary will upload any file given, as long as it meets the requirements of the access() system call. To do this level, log in as the level10 account with the password level10.</description>
    </item>
    
    <item>
      <title>Writeup: nebula (level 6 - level 8)</title>
      <link>https://chuang76.github.io/posts/nebula_p3/</link>
      <pubDate>Sat, 19 Dec 2020 16:05:18 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/nebula_p3/</guid>
      <description>Nebula is a virtual machine that covers a variety of challenges about Linux privilege escalation, scripting language issues, and file system race conditions. It is available at Exploit Exercises.
Level 6 The description of Level 6 is provided as follows.
The flag06 account credentials came from a legacy unix system. To do this level, log in as the level06 account with the password level06. Files for this level can be found in /home/flag06.</description>
    </item>
    
    <item>
      <title>Writeup: nebula (level 3 - level 5)</title>
      <link>https://chuang76.github.io/posts/nebula_p2/</link>
      <pubDate>Fri, 18 Dec 2020 12:06:53 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/nebula_p2/</guid>
      <description>Nebula is a virtual machine that covers a variety of challenges about Linux privilege escalation, scripting language issues, and file system race conditions. It is available at Exploit Exercises.
Level 3 The description of Level 3 is provided as follows.
Check the home directory of flag03 and take note of the files there. There is a crontab that is called every couple of minutes. To do this level, log in as the level03 account with the password level03.</description>
    </item>
    
    <item>
      <title>Writeup: nebula (level 0 - level 2)</title>
      <link>https://chuang76.github.io/posts/nebula_p1/</link>
      <pubDate>Wed, 16 Dec 2020 14:42:58 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/nebula_p1/</guid>
      <description>Nebula is a virtual machine that covers a variety of challenges about Linux privilege escalation, scripting language issues, and file system race conditions. It is available at Exploit Exercises.
Level 0 Here is the description about Level 0.
About This level requires you to find a Set User ID program that will run as the “flag00” account. You could also find this by carefully looking in top level directories in / for suspicious looking directories.</description>
    </item>
    
    <item>
      <title>Writeup: shellshock</title>
      <link>https://chuang76.github.io/posts/shellshock/</link>
      <pubDate>Mon, 14 Dec 2020 23:00:54 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/shellshock/</guid>
      <description>This is a challenge in pwnable.kr. The home directory contains the following files:
shellshock@pwnable:~$ ls -al total 980 drwxr-x--- 5 root shellshock 4096 Oct 23 2016 . drwxr-xr-x 116 root root 4096 Apr 17 2020 .. -r-xr-xr-x 1 root shellshock 959120 Oct 12 2014 bash d--------- 2 root root 4096 Oct 12 2014 .bash_history -r--r----- 1 root shellshock_pwn 47 Oct 12 2014 flag dr-xr-xr-x 2 root root 4096 Oct 12 2014 .</description>
    </item>
    
    <item>
      <title>Users and Groups</title>
      <link>https://chuang76.github.io/posts/users_and_groups/</link>
      <pubDate>Mon, 14 Dec 2020 13:49:34 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/users_and_groups/</guid>
      <description>Identifier Imagine a situation: there is a file contains sensitive information in the system. Obviously, regular users should not access this sensitive file arbitrarily in terms of security issues. So we need to figure out a solution to limit the permission of users.
Maybe you&amp;rsquo;ll ask: how about defining the available part of the file for the users? For example, in a sensitive file, line 0 to 5 belongs to user A, line 6 to 10 belongs to user B, and so forth.</description>
    </item>
    
    <item>
      <title>Writeup: mistake</title>
      <link>https://chuang76.github.io/posts/mistake/</link>
      <pubDate>Mon, 14 Dec 2020 12:49:21 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/mistake/</guid>
      <description>This is a challenge from pwnable.kr. According to the hint, the solution is about operator priority. Apart from that, we can observe that there are some mistakes in the source code.
if (fd = open(&amp;quot;/home/mistake/password&amp;quot;, O_RDONLY, 0400) &amp;lt; 0) { printf(&amp;quot;can&#39;t open password %d\n&amp;quot;, fd); return 0; } The priority of the assignment operator (=) is less than the relation operator (&amp;lt;). Since opening a file called password is successful, the return value is nonnegative.</description>
    </item>
    
    <item>
      <title>Writeup: leg</title>
      <link>https://chuang76.github.io/posts/leg/</link>
      <pubDate>Sat, 12 Dec 2020 10:39:51 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/leg/</guid>
      <description>This is a challenge from pwnable.kr. The part of the source code and its assembly code are provided as follows. To run the executable flag, we need to take the summation of key1(), key2(), and key3() as the input.
if( (key1()+key2()+key3()) == key ){ printf(&amp;quot;Congratz!\n&amp;quot;); int fd = open(&amp;quot;flag&amp;quot;, O_RDONLY); char buf[100]; int r = read(fd, buf, 100); write(0, buf, r); } (gdb) disass main Dump of assembler code for function main: 0x00008d3c &amp;lt;+0&amp;gt;: push {r4, r11, lr} 0x00008d40 &amp;lt;+4&amp;gt;: add r11, sp, #8 0x00008d44 &amp;lt;+8&amp;gt;: sub sp, sp, #12 0x00008d48 &amp;lt;+12&amp;gt;: mov r3, #0 0x00008d4c &amp;lt;+16&amp;gt;: str r3, [r11, #-16] 0x00008d50 &amp;lt;+20&amp;gt;: ldr r0, [pc, #104] ; 0x8dc0 &amp;lt;main+132&amp;gt; 0x00008d54 &amp;lt;+24&amp;gt;: bl 0xfb6c &amp;lt;printf&amp;gt; 0x00008d58 &amp;lt;+28&amp;gt;: sub r3, r11, #16 0x00008d5c &amp;lt;+32&amp;gt;: ldr r0, [pc, #96] ; 0x8dc4 &amp;lt;main+136&amp;gt; 0x00008d60 &amp;lt;+36&amp;gt;: mov r1, r3 0x00008d64 &amp;lt;+40&amp;gt;: bl 0xfbd8 &amp;lt;__isoc99_scanf&amp;gt; 0x00008d68 &amp;lt;+44&amp;gt;: bl 0x8cd4 &amp;lt;key1&amp;gt; 0x00008d6c &amp;lt;+48&amp;gt;: mov r4, r0 0x00008d70 &amp;lt;+52&amp;gt;: bl 0x8cf0 &amp;lt;key2&amp;gt; 0x00008d74 &amp;lt;+56&amp;gt;: mov r3, r0 0x00008d78 &amp;lt;+60&amp;gt;: add r4, r4, r3 0x00008d7c &amp;lt;+64&amp;gt;: bl 0x8d20 &amp;lt;key3&amp;gt; 0x00008d80 &amp;lt;+68&amp;gt;: mov r3, r0 0x00008d84 &amp;lt;+72&amp;gt;: add r2, r4, r3 0x00008d88 &amp;lt;+76&amp;gt;: ldr r3, [r11, #-16] 0x00008d8c &amp;lt;+80&amp;gt;: cmp r2, r3 0x00008d90 &amp;lt;+84&amp;gt;: bne 0x8da8 &amp;lt;main+108&amp;gt; 0x00008d94 &amp;lt;+88&amp;gt;: ldr r0, [pc, #44] ; 0x8dc8 &amp;lt;main+140&amp;gt; 0x00008d98 &amp;lt;+92&amp;gt;: bl 0x1050c &amp;lt;puts&amp;gt; 0x00008d9c &amp;lt;+96&amp;gt;: ldr r0, [pc, #40] ; 0x8dcc &amp;lt;main+144&amp;gt; 0x00008da0 &amp;lt;+100&amp;gt;: bl 0xf89c &amp;lt;system&amp;gt; 0x00008da4 &amp;lt;+104&amp;gt;: b 0x8db0 &amp;lt;main+116&amp;gt; 0x00008da8 &amp;lt;+108&amp;gt;: ldr r0, [pc, #32] ; 0x8dd0 &amp;lt;main+148&amp;gt; 0x00008dac &amp;lt;+112&amp;gt;: bl 0x1050c &amp;lt;puts&amp;gt; 0x00008db0 &amp;lt;+116&amp;gt;: mov r3, #0 0x00008db4 &amp;lt;+120&amp;gt;: mov r0, r3 0x00008db8 &amp;lt;+124&amp;gt;: sub sp, r11, #8 0x00008dbc &amp;lt;+128&amp;gt;: pop {r4, r11, pc} 0x00008dc0 &amp;lt;+132&amp;gt;: andeq r10, r6, r12, lsl #9 0x00008dc4 &amp;lt;+136&amp;gt;: andeq r10, r6, r12, lsr #9 0x00008dc8 &amp;lt;+140&amp;gt;: ; &amp;lt;UNDEFINED&amp;gt; instruction: 0x0006a4b0 0x00008dcc &amp;lt;+144&amp;gt;: ; &amp;lt;UNDEFINED&amp;gt; instruction: 0x0006a4bc 0x00008dd0 &amp;lt;+148&amp;gt;: andeq r10, r6, r4, asr #9 End of assembler dump.</description>
    </item>
    
    <item>
      <title>Writeup: input</title>
      <link>https://chuang76.github.io/posts/input/</link>
      <pubDate>Wed, 09 Dec 2020 15:00:11 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/input/</guid>
      <description>This is a challenge from pwnable.kr. After connecting to the remote server with ssh command (or downloading the files with scp command), we can view the source code as follows. As you can see, our goal is to clear all of the stages and capture the flag.
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;sys/socket.h&amp;gt; #include &amp;lt;arpa/inet.h&amp;gt; int main(int argc, char* argv[], char* envp[]){ printf(&amp;quot;Welcome to pwnable.kr\n&amp;quot;); printf(&amp;quot;Let&#39;s see if you know how to give input to program\n&amp;quot;); printf(&amp;quot;Just give me correct inputs then you will get the flag :)\n&amp;quot;); // argv if(argc !</description>
    </item>
    
    <item>
      <title>Writeup: passcode</title>
      <link>https://chuang76.github.io/posts/passcode/</link>
      <pubDate>Sun, 06 Dec 2020 20:04:19 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/passcode/</guid>
      <description>This is a challenge from pwnable.kr, it is a 32-bit ELF file without stripped.
passcode@pwnable:~$ file passcode passcode: setgid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-, for GNU/Linux 2.6.24, BuildID[sha1]=d2b7bd64f70e46b1b0eb7036b35b24a651c3666b, not stripped The source code could be displayed as follows.
passcode@pwnable:~$ cat passcode.c #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; void login(){ int passcode1; int passcode2; printf(&amp;#34;enter passcode1 : &amp;#34;); scanf(&amp;#34;%d&amp;#34;, passcode1); fflush(stdin); // ha! mommy told me that 32bit is vulnerable to bruteforcing :)  printf(&amp;#34;enter passcode2 : &amp;#34;); scanf(&amp;#34;%d&amp;#34;, passcode2); printf(&amp;#34;checking.</description>
    </item>
    
    <item>
      <title>Walkthrough: payload</title>
      <link>https://chuang76.github.io/posts/payload/</link>
      <pubDate>Fri, 04 Dec 2020 14:47:55 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/payload/</guid>
      <description>This is an example from the book: Practical Binary Analysis chapter 5. You can download it on the official website.
First, we can use file command to determine the type of payload. As you can see, it is a file which contains ASCII text. Subsequently, further view the contents with cat command.
$ file payload payload: ASCII text $ cat payload | head -n 5 H4sIABzY61gAA+xaD3RTVZq/Sf+lFJIof1r+2aenKKh0klJKi4MmJaUvWrTSFlgR0jRN20iadpKX UljXgROKjbUOKuOfWWfFnTlzZs/ZXTln9nTRcTHYERhnZ5c/R2RGV1lFTAFH/DNYoZD9vvvubd57 bcBl1ln3bL6e9Hvf9+733e/+v+/en0dqId80WYAWLVqI3LpooUXJgUpKFy6yEOsCy6KSRQtLLQsW EExdWkIEyzceGVA4JLmDgkCaA92XTXel9/9H6ftVNcv0Ot2orCe3E5RiJhuVbUw/fH3SxkbKSS78 v47MJtkgZynS2YhNxYeZa84NLF0G/DLhV66X5XK9TcVnsXSc6xQ8S1UCm4o/M5moOCHCqB3Geny2 However, it is hard to read.</description>
    </item>
    
    <item>
      <title>Lazy Binding</title>
      <link>https://chuang76.github.io/posts/lazy_binding/</link>
      <pubDate>Wed, 02 Dec 2020 12:08:22 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/lazy_binding/</guid>
      <description>Background During the investigation of the ELF format, I found out that I was not familiar enough with the lazy binding mechanism. So in this article, I&amp;rsquo;ll try to study and cover it with my notes and experiment.
  compile process
  dynamic linking and lazy binding
Why dynamic linking? (1) share codes, if the library (e.g. libc) contains a lot of functions, it is better to adopt code sharing mechanism.</description>
    </item>
    
    <item>
      <title>Toefl Preparation</title>
      <link>https://chuang76.github.io/posts/toefl/</link>
      <pubDate>Tue, 01 Dec 2020 19:20:12 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/toefl/</guid>
      <description>Intro 紀錄一些備考資源和心得，四戰約花兩周衝刺。
三戰：R29 L19 S19 W21, Total 88 四戰：R29 L25 S22 W23, Total 99 背景：過去很少碰英文 / 學測英文 14 級 / 沒背過指考 7000 單 / 舊制多益 700 多
Tools 常用的工具、逛的論壇
 考滿分：寫 TPO 的網站，破解區域限制可以用 KMF unblock 字典：Merriam Webster、Youglish、Collocation 論壇：r/ToeflAdvice、一畝三分地  Reading 以下分三個 part：
（一）增強實力
 分類單字：刷一遍分類單字，e.g. 生物學、考古學、天文學等 長難句：可以翻一下 GRE 長難句，抓平行結構、對比、讓步等 閱讀素材：National Geogaphy、Scientific American 補充：Merriam Webster 有提供例句，查單字可以順道點進去看文章 (主要的閱讀來源)  （二）答題技巧
前提：整篇文章不一定要每句都看懂，抓到作者想傳達的訊息即可 怎麼抓重點：通常一段只會有一到兩個重點，題目本質上就是文章重點 幾乎每句話都看不懂：看回主題句，段落要表達的常是圍繞主題句闡述 干擾選項：無中生有 / 主角被偷換 投機取巧：一整段要是都沒出題，我只會瞄首尾句就跳過，這個方法見仁見智 小結：第一段可以猜到整篇大概會講什麼 (討論某物種、某天文現象、美國某地農業發展等)；主題句仔細讀，重點交給題目提示，末句會銜接下一段，猜到下一段內容；剩下用掃的，這樣應該速度會快很多，有比較多時間處理模稜兩可或邏輯有問題的題目。  （三）其他
 錯題：考滿分上有發現弱項的功能，找出各種題型的答對率。我覺得這個功能很不錯，像個人特別弱的是字彙和句子簡化，後來刷單字和分析長難句來克服。 加試：根據 r/ToeflAdvice 上的鄉民所說，有約 80% 的機率會遇到閱讀加試，個人是二戰到四戰每次都遇到，建議可以練過一次 72 min 的閱讀感受一下。  Listening 本人聽力很爛，從聽力三戰 19 也看的出來。聽力跟閱讀不同，沒機會回頭聽第二次；也和考多益不一樣，不會先看到題目再聽音檔。檢討完後，拿了 25。</description>
    </item>
    
  </channel>
</rss>
