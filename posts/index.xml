<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Before Dawn</title>
    <link>https://chuang76.github.io/posts/</link>
    <description>Recent content in Posts on Before Dawn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 06 Dec 2020 20:04:19 +0800</lastBuildDate><atom:link href="https://chuang76.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Writeup: passcode</title>
      <link>https://chuang76.github.io/posts/passcode/</link>
      <pubDate>Sun, 06 Dec 2020 20:04:19 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/passcode/</guid>
      <description>This is a challenge from pwnable.kr, it is a 32-bit ELF file without stripped.
passcode@pwnable:~$ file passcode passcode: setgid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-, for GNU/Linux 2.6.24, BuildID[sha1]=d2b7bd64f70e46b1b0eb7036b35b24a651c3666b, not stripped The source code could be displayed as follows.
passcode@pwnable:~$ cat passcode.c #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; void login(){ int passcode1; int passcode2; printf(&amp;#34;enter passcode1 : &amp;#34;); scanf(&amp;#34;%d&amp;#34;, passcode1); fflush(stdin); // ha! mommy told me that 32bit is vulnerable to bruteforcing :)  printf(&amp;#34;enter passcode2 : &amp;#34;); scanf(&amp;#34;%d&amp;#34;, passcode2); printf(&amp;#34;checking.</description>
    </item>
    
    <item>
      <title>Walkthrough: payload</title>
      <link>https://chuang76.github.io/posts/payload/</link>
      <pubDate>Fri, 04 Dec 2020 14:47:55 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/payload/</guid>
      <description>This is an example from the book: Practical Binary Analysis chapter 5. You can download it on the official website.
First, we can use file command to determine the type of payload. As you can see, it is a file which contains ASCII text. Subsequently, further view the contents with cat command.
$ file payload payload: ASCII text $ cat payload | head -n 5 H4sIABzY61gAA+xaD3RTVZq/Sf+lFJIof1r+2aenKKh0klJKi4MmJaUvWrTSFlgR0jRN20iadpKX UljXgROKjbUOKuOfWWfFnTlzZs/ZXTln9nTRcTHYERhnZ5c/R2RGV1lFTAFH/DNYoZD9vvvubd57 bcBl1ln3bL6e9Hvf9+733e/+v+/en0dqId80WYAWLVqI3LpooUXJgUpKFy6yEOsCy6KSRQtLLQsW EExdWkIEyzceGVA4JLmDgkCaA92XTXel9/9H6ftVNcv0Ot2orCe3E5RiJhuVbUw/fH3SxkbKSS78 v47MJtkgZynS2YhNxYeZa84NLF0G/DLhV66X5XK9TcVnsXSc6xQ8S1UCm4o/M5moOCHCqB3Geny2 However, it is hard to read.</description>
    </item>
    
    <item>
      <title>Lazy binding</title>
      <link>https://chuang76.github.io/posts/lazy_binding/</link>
      <pubDate>Wed, 02 Dec 2020 12:08:22 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/lazy_binding/</guid>
      <description>Background During the investigation of the ELF format, I found out that I was not familiar enough with the lazy binding mechanism. So in this article, I&amp;rsquo;ll try to study and cover it with my notes and experiment.
  compile process
  dynamic linking and lazy binding
Why dynamic linking? (1) share codes, if the library (e.g. libc) contains a lot of functions, it is better to adopt code sharing mechanism.</description>
    </item>
    
    <item>
      <title>Toefl preparation</title>
      <link>https://chuang76.github.io/posts/toefl/</link>
      <pubDate>Sun, 29 Nov 2020 21:45:38 +0800</pubDate>
      
      <guid>https://chuang76.github.io/posts/toefl/</guid>
      <description>Intro 本人英文不好，這篇紀錄備考資源和一點拙見，希望能鼓勵到準備托福的同學。前兩戰去浪費錢的，三戰和四戰時間約隔兩周左右。
三戰：R29 L19 S19 W21, Total 88 四戰：R29 L25 S22 W23, Total 99 背景：
 理工科，平常很少碰英文 / 學測英文 14 級 / 沒背過指考 7000 單 / 舊制多益 700 多 英文聽力耳背界權威，把聽力考卷當閱讀測驗在寫  Tools 常用的工具、逛的論壇
 考滿分：寫 TPO 的網站（破解區域限制：KMF unblock） 字典：Merriam Webster、Youglish、Collocation 論壇：r/ToeflAdvice、一畝三分地  Reading 閱讀算是我比較穩定的一科，以下分三個 part：
（一）增強實力
 分類單字：刷一遍分類單字，e.g. 生物學、考古學、天文學等 長難句：可以翻一下 GRE 長難字的書，抓平行結構、對比、讓步等 閱讀素材：National Geogaphy、Scientific American 補充：Merriam Webster 有提供例句，查單字可以順道點進去看文章（我主要的閱讀來源，雜七雜八都看）  （二）答題技巧
前提：整篇文章不一定要每句都看懂，抓到作者想傳達的訊息即可 怎麼抓重點：通常一段只會有一到兩個重點，題目本質上就是文章重點 幾乎每句話都看不懂：看回主題句，段落要表達的常是圍繞主題句闡述 干擾選項：無中生有 / 主角被偷換 投機取巧：段落要是都沒出題，我只會瞄首尾句就跳過，這個方法見仁見智 小結：第一段可以猜到整篇大概會講什麼（討論某物種、某天文現象、美國某地農業發展等）；主題句仔細讀，重點交給題目提示，末句會銜接下一段，猜到下一段內容；剩下用掃的，這樣應該速度會快很多，有比較多時間處理模稜兩可或邏輯有問題的題目。  （三）其他</description>
    </item>
    
  </channel>
</rss>
